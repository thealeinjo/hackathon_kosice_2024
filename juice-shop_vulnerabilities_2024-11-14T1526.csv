Group Name,Project Name,Tool,Scanner Name,Status,Vulnerability,Details,Additional Info,Severity,CVE,CWE,Other Identifiers,Detected At,Location,Activity,Comments,Full Path,CVSS Vectors,Dismissal Reason
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""lib/codingChallenges.ts"", ""start_line""=>21}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""data/datacreator.ts"", ""start_line""=>221}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""routes/chatbot.ts"", ""start_line""=>31}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""routes/order.ts"", ""start_line""=>45}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/order.ts"", ""start_line""=>71}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Regular expression with non-literal value,"The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",,medium,,CWE-185,"""A1:2017 - Injection""; ""ESLint rule ID/detect-non-literal-regexp""; eslint.detect-non-literal-regexp; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""lib/codingChallenges.ts"", ""start_line""=>78}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/wallet.ts"", ""end_line""=>24, ""start_line""=>23}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of directives in dynamically evaluated code ('Eval Injection'),"The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",,high,,CWE-95,"eslint.detect-eval-with-expression; ""A1:2017 - Injection""; ""A03:2021 - Injection""; ""ESLint rule ID/detect-eval-with-expression""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>23}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/resetPassword.ts"", ""end_line""=>35, ""start_line""=>30}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,URL redirection to untrusted site 'open redirect',"Passing untrusted user input in `redirect()` can result in an open redirect\nvulnerability. This could be abused by malicious actors to trick users into \nbeing redirected to websites under their control to capture authentication\ninformation.  \nTo prevent open redirect vulnerabilities:\n\n- Always validate and sanitize user inputs, especially URL parameters\n or query strings that may influence the flow of the application.\n- Use allowlists (lists of permitted URLs) to validate redirect targets \n against known, trusted URLs before performing the redirect.\n- Avoid directly using user input for redirecting. If unavoidable, ensure\n strict validation against an allowlist.\n\nFollowing is an example of secure validation against allowlist to prevent the vulnerability:\n ```\n // Define a list of explicitly allowed URLs for redirection\n const allowedUrls = [\n     'https://www.example.com/page1',\n     'https://www.example.com/page2',\n     'https://secure.example.com/page3'\n ];\n\n app.get('/redirect/:url', (req, res) => {\n     const url = decodeURIComponent(req.params.url);\n     const isAllowed = allowedUrls.includes(url);\n     if (isAllowed) {\n         // If the URL is allowed, proceed with the redirect\n         res.redirect(url);\n     } else {\n         res.status(400).send('Invalid redirect URL');\n     }\n });\n ```\n",,critical,,CWE-601,"""A1:2017 - Injection""; nodejs_scan.javascript-redirect-rule-express_open_redirect; ""NodeJS Scan ID javascript-redirect-rule-express_open_redirect""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/redirect.ts"", ""start_line""=>19}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""data/datacreator.ts"", ""start_line""=>682}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""lib/codingChallenges.ts"", ""start_line""=>22}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""lib/codingChallenges.ts"", ""start_line""=>29}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Deserialization of Untrusted Data,User controlled data in 'yaml.load()' function can result in Remote Code Injection.\n,,critical,,CWE-502,"""NodeJS Scan ID javascript-eval-rule-yaml_deserialize""; ""A8:2017 - Insecure Deserialization""; nodejs_scan.javascript-eval-rule-yaml_deserialize; ""A08:2021 - Software and Data Integrity Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""server.ts"", ""start_line""=>59}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/resetPassword.ts"", ""end_line""=>53, ""start_line""=>19}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""rsn/rsnUtil.ts"", ""start_line""=>48}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/deluxe.ts"", ""start_line""=>35}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/delivery.ts"", ""start_line""=>34}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Deserialization of Untrusted Data,User controlled data in 'yaml.load()' function can result in Remote Code Injection.\n,,critical,,CWE-502,"""NodeJS Scan ID javascript-eval-rule-yaml_deserialize""; ""A8:2017 - Insecure Deserialization""; nodejs_scan.javascript-eval-rule-yaml_deserialize; ""A08:2021 - Software and Data Integrity Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/vulnCodeFixes.ts"", ""start_line""=>80}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of directives in dynamically evaluated code ('Eval Injection'),"The application was found calling the `eval` function OR Function()\n  constructor OR setTimeout() OR setInterval() methods. If the\n\n  variables or strings or functions passed to these methods contains user-supplied input, an adversary could attempt to execute arbitrary\n\n  JavaScript\n\n  code. This could lead to a full system compromise in Node applications or Cross-site Scripting\n\n  (XSS) in web applications.\n\n\n  To remediate this issue, remove all calls to above methods and consider alternative methods for\n\n  executing\n\n  the necessary business logic. There is almost no safe method of calling `eval` or other above stated sinks with\n\n  user-supplied input.\n\n  Instead, consider alternative methods such as using property accessors to dynamically access\n\n  values.\n\n\n  Example using property accessors to dynamically access an object's property:\n\n  ```\n\n  // Define an object\n\n  const obj = {key1: 'value1', key2: 'value2'};\n\n  // Get key dynamically from user input\n\n  const key = getUserInput();\n\n  // Check if the key exists in our object and return it, or a default empty string\n\n  const value = (obj.hasOwnProperty(key)) ? obj[key] : '';\n\n  // Work with the value\n\n  ```\n\n\n  For more information on why not to use `eval`, and alternatives see:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/eval#never_use_eval!\n\n  Other References:\n\n  - https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Function/Function\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setTimeout\n\n  - https://developer.mozilla.org/en-US/docs/Web/API/setInterval\n",,high,,CWE-95,"eslint.detect-eval-with-expression; ""A1:2017 - Injection""; ""A03:2021 - Injection""; ""ESLint rule ID/detect-eval-with-expression""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/userProfile.ts"", ""start_line""=>36}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""data/datacreator.ts"", ""start_line""=>297}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/securityQuestion.ts"", ""end_line""=>19, ""start_line""=>14}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/payment.ts"", ""start_line""=>41}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Unchecked input for loop condition,"This application is looping over user controlled objects, which can lead to a layer 7 denial of service vulnerability.\n\nA layer 7 denial of service attack refers to overloading the application layer of the OSI model, typically layer 7. \nThis can happen when user-controlled input such as objects, arrays, strings, etc. are iterated or looped over without proper validation or limits in place.\n\nFor example, if a user can control the size of an array or object passed into the application, \nthey could create an extremely large input that gets looped over. This would consume excessive CPU cycles or memory, \npotentially crashing or slowing down the application.\n\nTo prevent this, limits should be set on the number of iterations, input sizes, recursion depth, etc.\n\nSample case of secure array looped over with user-controlled input\n```\n// Potential DoS if req.body.list.length is large.\napp.post('/dos/layer7-object-dos/for-loop/1', function (req, res) {\n    var list = req.body.list;\n    for (let i = 0; i <= 10; i++) {\n        if(!list[i]){\n          // return;\n        }  \n    }\n    res.send(""res"")\n});\n```\n\nImplementing protections against layer 7 denial of service attacks is important for securing modern web applications and APIs.\n",,medium,,CWE-606,"""NodeJS Scan ID javascript-dos-rule-layer7_object_dos""; nodejs_scan.javascript-dos-rule-layer7_object_dos; ""A6:2017 - Security Misconfiguration""; ""A05:2021 - Security Misconfiguration""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/payment.ts"", ""start_line""=>22}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""routes/vulnCodeSnippet.ts"", ""start_line""=>93}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/order.ts"", ""start_line""=>117}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of hard-coded credentials,"Hardcoded JWT secret or private key was found. Hardcoding secrets like JWT signing keys poses a significant security risk. \nIf the source code ends up in a public repository or is compromised, the secret is exposed. Attackers could then use the secret to \ngenerate forged tokens and access the system. Store it properly in an environment variable.\n\nHere are some recommended safe ways to access JWT secrets:\n  - Use environment variables to store the secret and access it in code instead of hardcoding. This keeps it out of source control.\n  - Use a secrets management service to securely store and tightly control access to the secret. Applications can request the secret at runtime.\n  - For local development, use a .env file that is gitignored and access the secret from process.env.\n\nsample code snippet of accessing JWT secret from env variables\n```\n const token = jwt.sign(payload, process.env.SECRET, { algorithm: 'HS256' });\n```\n",,high,,CWE-798,"""A3:2017 - Sensitive Data Exposure""; nodejs_scan.javascript-jwt-rule-hardcoded_jwt_secret; ""A02:2021 - Cryptographic Failures""; ""NodeJS Scan ID javascript-jwt-rule-hardcoded_jwt_secret""",2024-11-14 15:16:30 UTC,"{""file""=>""lib/insecurity.ts"", ""start_line""=>56}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""rsn/rsnUtil.ts"", ""start_line""=>103}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/securityQuestion.ts"", ""end_line""=>31, ""start_line""=>13}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Observable timing discrepancy,"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",,medium,,CWE-208,"eslint.detect-possible-timing-attacks; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""; ""ESLint rule ID/detect-possible-timing-attacks""",2024-11-14 15:16:30 UTC,"{""file""=>""frontend/src/app/register/register.component.ts"", ""end_line""=>95, ""start_line""=>93}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/dataErasure.ts"", ""end_line""=>44, ""start_line""=>24}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/likeProductReviews.ts"", ""end_line""=>63, ""start_line""=>16}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""data/datacreator.ts"", ""start_line""=>239}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Unchecked input for loop condition,"This application is looping over user controlled objects, which can lead to a layer 7 denial of service vulnerability.\n\nA layer 7 denial of service attack refers to overloading the application layer of the OSI model, typically layer 7. \nThis can happen when user-controlled input such as objects, arrays, strings, etc. are iterated or looped over without proper validation or limits in place.\n\nFor example, if a user can control the size of an array or object passed into the application, \nthey could create an extremely large input that gets looped over. This would consume excessive CPU cycles or memory, \npotentially crashing or slowing down the application.\n\nTo prevent this, limits should be set on the number of iterations, input sizes, recursion depth, etc.\n\nSample case of secure array looped over with user-controlled input\n```\n// Potential DoS if req.body.list.length is large.\napp.post('/dos/layer7-object-dos/for-loop/1', function (req, res) {\n    var list = req.body.list;\n    for (let i = 0; i <= 10; i++) {\n        if(!list[i]){\n          // return;\n        }  \n    }\n    res.send(""res"")\n});\n```\n\nImplementing protections against layer 7 denial of service attacks is important for securing modern web applications and APIs.\n",,medium,,CWE-606,"""NodeJS Scan ID javascript-dos-rule-layer7_object_dos""; nodejs_scan.javascript-dos-rule-layer7_object_dos; ""A6:2017 - Security Misconfiguration""; ""A05:2021 - Security Misconfiguration""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/dataExport.ts"", ""start_line""=>54}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; ""NodeJS Scan ID javascript-database-rule-node_nosqli_js_injection""; ""A03:2021 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_js_injection",2024-11-14 15:16:30 UTC,"{""file""=>""routes/showProductReviews.ts"", ""end_line""=>46, ""start_line""=>30}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""lib/insecurity.ts"", ""start_line""=>55}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Relative path traversal,"This application is using untrusted user input in express render() function.\nRendering templates with untrusted user input enables arbitrary file read \nvulnerabilities when using templating engines like Handlebars (hbs). \n\nAn attacker can craft malicious input that traverses the filesystem and exposes sensitive files. \nConsider sanitizing and validating all user input before passing it to render() to prevent arbitrary file reads. \n\nSample safe use of express.render function\n```\napp.get(""/traversal/2"", async (req, res) => {\n    var indexPath = ""index"";\n    res.render(indexPath, { title: ""Index Page"" })\n});\n```\n\nFor more details see: \nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-23,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""NodeJS Scan ID javascript-traversal-rule-express_lfr""; nodejs_scan.javascript-traversal-rule-express_lfr",2024-11-14 15:16:30 UTC,"{""file""=>""routes/dataErasure.ts"", ""start_line""=>41}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""routes/vulnCodeSnippet.ts"", ""start_line""=>94}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""lib/utils.ts"", ""start_line""=>124}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/deluxe.ts"", ""start_line""=>19}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Regular expression with non-literal value,"The `RegExp` constructor was called with a non-literal value. If an adversary were able to\nsupply a malicious regex, they could cause a Regular Expression Denial of Service (ReDoS)\nagainst the application. In Node applications, this could cause the entire application to no\nlonger be responsive to other users' requests.\n\nTo remediate this issue, never allow user-supplied regular expressions. Instead, the regular \nexpression should be  hardcoded. If this is not possible, consider using an alternative regular\nexpression engine such as [node-re2](https://www.npmjs.com/package/re2). RE2 is a safe alternative \nthat does not support backtracking, which is what leads to ReDoS.\n\nExample using re2 which does not support backtracking (Note: it is still recommended to\nnever use user-supplied input):\n```\n// Import the re2 module\nconst RE2 = require('re2');\n\nfunction match(userSuppliedRegex, userInput) {\n    // Create a RE2 object with the user supplied regex, this is relatively safe\n    // due to RE2 not supporting backtracking which can be abused to cause long running\n    // queries\n    var re = new RE2(userSuppliedRegex);\n    // Execute the regular expression against some userInput\n    var result = re.exec(userInput);\n    // Work with the result\n}\n```\n\nFor more information on Regular Expression DoS see:\n- https://owasp.org/www-community/attacks/Regular_expression_Denial_of_Service_-_ReDoS\n",,medium,,CWE-185,"""A1:2017 - Injection""; ""ESLint rule ID/detect-non-literal-regexp""; eslint.detect-non-literal-regexp; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""lib/codingChallenges.ts"", ""start_line""=>76}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:30 UTC,"{""file""=>""routes/vulnCodeFixes.ts"", ""start_line""=>80}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/dataErasure.ts"", ""end_line""=>32, ""start_line""=>27}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/order.ts"", ""start_line""=>36}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>17}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"This application is extracting ZIP archives without sanitizing paths or writing files to a dedicated extraction directory. \nThis allows attackers to overwrite sensitive files or inject malicious code by manipulating TAR archive contents.\n\nTo fix, sanitize all paths from ZIP archives before writing extracted files using path.basename and path.join.\n\nExample  of extracting tar files safely:\n```\napp.get(""/extract"", async (req, res) => {\n        fs.createReadStream(zipPath)\n        .pipe(unzipper.Parse())\n        .on('entry', entry => {\n            const directory = 'assets/tar/extracted/';\n            const filename = entry.path;\n            entry.pipe(fs.createWriteStream(path.join(directory, filename)));\n        });\n});\n```\n\nWrite extracted files only to a dedicated extraction directory, not the global filesystem. Limit extracts to allowed file type.\n\nSee OWASP Path Traversal (https://owasp.org/www-community/attacks/Path_Traversal) and Unrestricted Upload of File with \nDangerous Type (https://owasp.org/www-community/vulnerabilities/Unrestricted_File_Upload) for more details.\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; nodejs_scan.javascript-traversal-rule-zip_path_overwrite; ""A01:2021 - Broken Access Control""; ""NodeJS Scan ID javascript-traversal-rule-zip_path_overwrite""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/fileUpload.ts"", ""start_line""=>42}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/order.ts"", ""start_line""=>140}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/basket.ts"", ""start_line""=>18}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>20}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:30 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>16}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/wallet.ts"", ""start_line""=>24}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:31 UTC,"{""file""=>""routes/chatbot.ts"", ""start_line""=>40}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/order.ts"", ""end_line""=>174, ""start_line""=>35}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Deserialization of Untrusted Data,User controlled data in 'yaml.load()' function can result in Remote Code Injection.\n,,critical,,CWE-502,"""NodeJS Scan ID javascript-eval-rule-yaml_deserialize""; ""A8:2017 - Insecure Deserialization""; nodejs_scan.javascript-eval-rule-yaml_deserialize; ""A08:2021 - Software and Data Integrity Failures""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/vulnCodeSnippet.ts"", ""start_line""=>94}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>19}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Relative path traversal,"This application is using untrusted user input in express render() function.\nRendering templates with untrusted user input enables arbitrary file read \nvulnerabilities when using templating engines like Handlebars (hbs). \n\nAn attacker can craft malicious input that traverses the filesystem and exposes sensitive files. \nConsider sanitizing and validating all user input before passing it to render() to prevent arbitrary file reads. \n\nSample safe use of express.render function\n```\napp.get(""/traversal/2"", async (req, res) => {\n    var indexPath = ""index"";\n    res.render(indexPath, { title: ""Index Page"" })\n});\n```\n\nFor more details see: \nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-23,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""NodeJS Scan ID javascript-traversal-rule-express_lfr""; nodejs_scan.javascript-traversal-rule-express_lfr",2024-11-14 15:16:31 UTC,"{""file""=>""routes/dataErasure.ts"", ""end_line""=>82, ""start_line""=>72}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/deluxe.ts"", ""start_line""=>25}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:31 UTC,"{""file""=>""routes/vulnCodeFixes.ts"", ""start_line""=>28}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/wallet.ts"", ""start_line""=>12}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/basketItems.ts"", ""start_line""=>67}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Observable timing discrepancy,"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",,medium,,CWE-208,"eslint.detect-possible-timing-attacks; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""; ""ESLint rule ID/detect-possible-timing-attacks""",2024-11-14 15:16:31 UTC,"{""file""=>""frontend/src/app/change-password/change-password.component.ts"", ""end_line""=>82, ""start_line""=>80}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Relative path traversal,"This application is using untrusted user input in express render() function.\nRendering templates with untrusted user input enables arbitrary file read \nvulnerabilities when using templating engines like Handlebars (hbs). \n\nAn attacker can craft malicious input that traverses the filesystem and exposes sensitive files. \nConsider sanitizing and validating all user input before passing it to render() to prevent arbitrary file reads. \n\nSample safe use of express.render function\n```\napp.get(""/traversal/2"", async (req, res) => {\n    var indexPath = ""index"";\n    res.render(indexPath, { title: ""Index Page"" })\n});\n```\n\nFor more details see: \nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-23,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""NodeJS Scan ID javascript-traversal-rule-express_lfr""; nodejs_scan.javascript-traversal-rule-express_lfr",2024-11-14 15:16:31 UTC,"{""file""=>""routes/dataErasure.ts"", ""end_line""=>89, ""start_line""=>87}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>15}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/basket.ts"", ""end_line""=>34, ""start_line""=>17}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:31 UTC,"{""file""=>""routes/vulnCodeFixes.ts"", ""start_line""=>79}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/captcha.ts"", ""start_line""=>37}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of input during web page generation ('Cross-site Scripting'),"This application accepts user input directly from the client side without validation. \nThis could lead to Cross Site Scripting (XSS) if the input contains malicious script code and \nthe application server does not properly escape or sanitize the output.  \nConsider encoding input data before sending it to the client side.  \n\n```\n// safe method of sending user input data\nrouter.get('/safe/1', (req, res) => {\n  var name = encodeURI(req.query.name); \n  res.send(name);\n})\n```\n\nXSS is an attack that exploits a web application or system to treat user input as markup or script code. \nIt is important to encode the data depending on the specific context in which it is used. \n",,medium,,CWE-79,"""A03:2021 - Injection""; ""A7:2017 - Cross-Site Scripting (XSS)""; nodejs_scan.javascript-xss-rule-express_xss; ""NodeJS Scan ID javascript-xss-rule-express_xss""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/dataExport.ts"", ""start_line""=>102}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Origin validation error,"Access-Control-Allow-Origin response header is set to ""*"". This will disable CORS Same Origin Policy restrictions.\n",,medium,,CWE-346,"""A6:2017 - Security Misconfiguration""; ""A05:2021 - Security Misconfiguration""; nodejs_scan.javascript-headers-rule-generic_cors; ""NodeJS Scan ID javascript-headers-rule-generic_cors""",2024-11-14 15:16:31 UTC,"{""file""=>""server.ts"", ""start_line""=>174}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in MongoDB $where operator can result in NoSQL JavaScript Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; ""NodeJS Scan ID javascript-database-rule-node_nosqli_js_injection""; ""A03:2021 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_js_injection",2024-11-14 15:16:31 UTC,"{""file""=>""routes/trackOrder.ts"", ""end_line""=>26, ""start_line""=>14}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of directives in dynamically evaluated code ('Eval Injection'),"The application was found to dynamically import a module by calling `require` using a\nnon-literal string. An adversary might be able to read the first line of\narbitrary files. If they had write access to the file system, they may also be able to\nexecute arbitrary code.\n\nTo remediate this issue, use a hardcoded string literal when calling `require`. Never call it\nit with dynamically created variables or user-supplied data.\n",,low,,CWE-95,"""A1:2017 - Injection""; ""A03:2021 - Injection""; eslint.detect-non-literal-require; ""ESLint rule ID/detect-non-literal-require""",2024-11-14 15:16:31 UTC,"{""file""=>""cypress.config.ts"", ""end_line""=>51, ""start_line""=>49}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper neutralization of special elements in data query logic,Untrusted user input in findOne() function can result in NoSQL Injection.\n,,critical,,CWE-943,"""A1:2017 - Injection""; nodejs_scan.javascript-database-rule-node_nosqli_injection; ""NodeJS Scan ID javascript-database-rule-node_nosqli_injection""; ""A03:2021 - Injection""",2024-11-14 15:16:31 UTC,"{""file""=>""routes/address.ts"", ""start_line""=>18}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Use of cryptographically weak pseudo-random number generator (PRNG),"This rule identifies use of cryptographically weak random number generators.\nUsing cryptographically weak random number generators like `crypto.pseudoRandomBytes()` \nand `Math.random()` for security-critical tasks can expose systems to significant \nvulnerabilities. Attackers might predict the generated random numbers, compromising \nthe integrity and confidentiality of cryptographic operations. This could lead to \nbreaches where sensitive data is accessed or manipulated, authentication mechanisms \nare bypassed, or secure communications are intercepted, ultimately undermining the \nsecurity of the entire system or application.\n\nMitigation strategy:\nReplace the use of these cryptographically weak random number generators with \n`crypto.randomBytes()`, a method provided by Node.js's `crypto` module that \ngenerates cryptographically secure random numbers. This method should be used \nfor all operations requiring secure randomness, such as generating keys, tokens, \nor any cryptographic material.\n\nSecure Code Example:\n```\nconst crypto = require('crypto');\nconst secureBytes = crypto.randomBytes(256);\nconsole.log(`Secure random bytes: ${secureBytes.toString('hex')}`);\n```\n",,medium,,CWE-338,"nodejs_scan.javascript-crypto-rule-node_insecure_random_generator; ""NodeJS Scan ID javascript-crypto-rule-node_insecure_random_generator""; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""",2024-11-14 15:16:31 UTC,"{""file""=>""frontend/src/app/code-snippet/code-snippet.component.ts"", ""start_line""=>146}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Observable timing discrepancy,"The application was found executing string comparisons using one of `===`, `!==`, `==` or `!=`\nagainst security sensitive values. String comparisons like this are not constant time, meaning\nthe\nfirst character found not to match in the two strings will immediately exit the conditional\nstatement.\nThis allows an adversary to calculate or observe small timing differences depending on the\nstrings\npassed to this comparison. This potentially allows an adversary the ability to brute force a\nstring\nthat will match the expected value by monitoring different character values.\n\nTo remediate this issue, use the `crypto.timingSafeEqual` method when comparing strings.\n\nExample using `crypto.timingSafeEqual` to safely compare strings:\n```\nfunction constantTimeIsPasswordEqual(userInput) {\n    // Retrieve the password from a secure data store such as a KMS or Hashicorp's vault.\n    const password = getPasswordFromSecureDataStore();\n    // Use crypto timingSafeEqual to ensure the comparison is done in constant time.\n    return crypto.timingSafeEqual(Buffer.from(userInput, 'utf-8'), Buffer.from(password,\n'utf-8'));\n}\n```\n\nFor more information on constant time comparison see:\n- https://nodejs.org/api/crypto.html#crypto_crypto_timingsafeequal_a_b\n",,medium,,CWE-208,"eslint.detect-possible-timing-attacks; ""A3:2017 - Sensitive Data Exposure""; ""A02:2021 - Cryptographic Failures""; ""ESLint rule ID/detect-possible-timing-attacks""",2024-11-14 15:16:31 UTC,"{""file""=>""frontend/src/app/forgot-password/forgot-password.component.ts"", ""end_line""=>120, ""start_line""=>118}",FALSE,,,,
,juice-shop,sast,Semgrep,detected,Improper limitation of a pathname to a restricted directory ('Path Traversal'),"The application dynamically constructs file or path information. If the path\ninformation comes from user-supplied input, it could be abused to read sensitive files,\naccess other users' data, or aid in exploitation to gain further system access.\n\nUser input should never be used in constructing paths or files for interacting\nwith the filesystem. This includes filenames supplied by user uploads or downloads.\nIf possible, consider hashing user input or using unique values and\nuse `path.normalize` to resolve and validate the path information\nprior to processing any file functionality.\n\nExample using `path.normalize` and not allowing direct user input:\n```\n// User input, saved only as a reference\n// id is a randomly generated UUID to be used as the filename\nconst userData = {userFilename: userSuppliedFilename, id: crypto.randomUUID()};\n// Restrict all file processing to this directory only\nconst basePath = '/app/restricted/';\n\n// Create the full path, but only use our random generated id as the filename\nconst joinedPath = path.join(basePath, userData.id);\n// Normalize path, removing any '..'\nconst fullPath = path.normalize(joinedPath);\n// Verify the fullPath is contained within our basePath\nif (!fullPath.startsWith(basePath)) {\n    console.log(""Invalid path specified!"");\n}\n// Process / work with file\n// ...\n```\n\nFor more information on path traversal issues see OWASP:\nhttps://owasp.org/www-community/attacks/Path_Traversal\n",,medium,,CWE-22,"""A5:2017 - Broken Access Control""; ""A01:2021 - Broken Access Control""; ""ESLint rule ID/detect-non-literal-fs-filename""; eslint.detect-non-literal-fs-filename",2024-11-14 15:16:31 UTC,"{""file""=>""Gruntfile.js"", ""start_line""=>76}",FALSE,,,,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.",,medium,CVE-2020-28500,,Gemnasium-dfb5ce4b-88fa-4c99-9a00-c13bc4d39ff0,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L; NVD=AV:N/AC:L/Au:N/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"A prototype pollution vulnerability was found in lodash where the functions `merge`, `mergeWith`, and `defaultsDeep` can be tricked into adding or modifying properties of `Object.prototype`.",,critical,CVE-2018-16487,,Gemnasium-d8822263-8a6f-43ea-bb6b-7a2a0cabdf5c,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Improper Input Validation,lodash is vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a constructor payload.,,critical,CVE-2019-10744,,Gemnasium-4774cd67-936f-419e-8533-ae5cfe7db9f9,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Object Prototype Pollution,Prototype pollution attack when using `_.zipObjectDeep` in lodash.,,high,CVE-2020-8203,,Gemnasium-1f7fa42b-6b17-46b7-88a5-8995b43d298f,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H; NVD=AV:N/AC:M/Au:N/C:N/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Object Prototype Pollution,Prototype pollution attack when using `_.zipObjectDeep` in lodash.,,high,CVE-2020-8203,,Gemnasium-1f7fa42b-6b17-46b7-88a5-8995b43d298f,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H; NVD=AV:N/AC:M/Au:N/C:N/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Command Injection,All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template.,,high,CVE-2021-23337,,Gemnasium-e5737c01-5af2-4fe9-99c0-c232d7960f2b,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:S/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Command Injection,All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template.,,high,CVE-2021-23337,,Gemnasium-e5737c01-5af2-4fe9-99c0-c232d7960f2b,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:S/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Object Prototype Pollution,Prototype pollution attack when using `_.zipObjectDeep` in lodash.,,high,CVE-2020-8203,,Gemnasium-1f7fa42b-6b17-46b7-88a5-8995b43d298f,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:H/PR:N/UI:N/S:U/C:N/I:H/A:H; NVD=AV:N/AC:M/Au:N/C:N/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Modification of Assumed-Immutable Data (MAID),"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of `Object` via `__proto__`, causing the addition or modification of an existing property that will exist on all objects.",,medium,CVE-2018-3721,,Gemnasium-d85c7e84-cd50-4829-85a4-7e0e69f1b396,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N; NVD=AV:N/AC:L/Au:S/C:N/I:P/A:N,
,juice-shop,dependency_scanning,Gemnasium,detected,Improper Input Validation,lodash is vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a constructor payload.,,critical,CVE-2019-10744,,Gemnasium-4774cd67-936f-419e-8533-ae5cfe7db9f9,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Modification of Assumed-Immutable Data (MAID),"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of `Object` via `__proto__`, causing the addition or modification of an existing property that will exist on all objects.",,medium,CVE-2018-3721,,Gemnasium-d85c7e84-cd50-4829-85a4-7e0e69f1b396,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N; NVD=AV:N/AC:L/Au:S/C:N/I:P/A:N,
,juice-shop,dependency_scanning,Gemnasium,detected,Denial of Service and remote code execution,"Functions in Lodash ( merge, mergeWith, defaultsDeep) can modify the prototype of ""Object"" if given malicious data. This can lead to denial of service or remote code execution.",,unknown,,,Gemnasium-46774bb9-9ce5-4ffe-9bc8-4e610d24df43,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,lodash is affected by Uncontrolled Resource Consumption which can lead to a denial of service.,,medium,CVE-2019-1010266,,Gemnasium-109f3b4c-bdb3-48be-b2f9-e0348fba64bd,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H; NVD=AV:N/AC:L/Au:S/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Command Injection,All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Command Injection via template.,,high,CVE-2021-23337,,Gemnasium-e5737c01-5af2-4fe9-99c0-c232d7960f2b,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:H/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:S/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"A prototype pollution vulnerability was found in lodash where the functions `merge`, `mergeWith`, and `defaultsDeep` can be tricked into adding or modifying properties of `Object.prototype`.",,critical,CVE-2018-16487,,Gemnasium-d8822263-8a6f-43ea-bb6b-7a2a0cabdf5c,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.",,medium,CVE-2020-28500,,Gemnasium-dfb5ce4b-88fa-4c99-9a00-c13bc4d39ff0,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.min.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L; NVD=AV:N/AC:L/Au:N/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Modification of Assumed-Immutable Data (MAID),"lodash node module suffers from a Modification of Assumed-Immutable Data (MAID) vulnerability via defaultsDeep, merge, and mergeWith functions, which allows a malicious user to modify the prototype of `Object` via `__proto__`, causing the addition or modification of an existing property that will exist on all objects.",,medium,CVE-2018-3721,,Gemnasium-d85c7e84-cd50-4829-85a4-7e0e69f1b396,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:H/A:N; NVD=AV:N/AC:L/Au:S/C:N/I:P/A:N,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"A prototype pollution vulnerability was found in lodash where the functions `merge`, `mergeWith`, and `defaultsDeep` can be tricked into adding or modifying properties of `Object.prototype`.",,critical,CVE-2018-16487,,Gemnasium-d8822263-8a6f-43ea-bb6b-7a2a0cabdf5c,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Denial of Service and remote code execution,"Functions in Lodash ( merge, mergeWith, defaultsDeep) can modify the prototype of ""Object"" if given malicious data. This can lead to denial of service or remote code execution.",,unknown,,,Gemnasium-46774bb9-9ce5-4ffe-9bc8-4e610d24df43,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,lodash is affected by Uncontrolled Resource Consumption which can lead to a denial of service.,,medium,CVE-2019-1010266,,Gemnasium-109f3b4c-bdb3-48be-b2f9-e0348fba64bd,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H; NVD=AV:N/AC:L/Au:S/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Improper Input Validation,lodash is vulnerable to Prototype Pollution. The function `defaultsDeep` could be tricked into adding or modifying properties of `Object.prototype` using a constructor payload.,,critical,CVE-2019-10744,,Gemnasium-4774cd67-936f-419e-8533-ae5cfe7db9f9,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:N/UI:N/S:U/C:H/I:H/A:H; NVD=AV:N/AC:L/Au:N/C:P/I:P/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,"All versions of package lodash; all versions of package `org.fujion.webjars:lodash` is vulnerable to Regular Expression Denial of Service (ReDoS) via the `toNumber`, `trim` and `trimEnd` functions.",,medium,CVE-2020-28500,,Gemnasium-dfb5ce4b-88fa-4c99-9a00-c13bc4d39ff0,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.1/AV:N/AC:L/PR:N/UI:N/S:U/C:N/I:N/A:L; NVD=AV:N/AC:L/Au:N/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Uncontrolled Resource Consumption,lodash is affected by Uncontrolled Resource Consumption which can lead to a denial of service.,,medium,CVE-2019-1010266,,Gemnasium-109f3b4c-bdb3-48be-b2f9-e0348fba64bd,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/dist/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,NVD=CVSS:3.0/AV:N/AC:L/PR:L/UI:N/S:U/C:N/I:N/A:H; NVD=AV:N/AC:L/Au:S/C:N/I:N/A:P,
,juice-shop,dependency_scanning,Gemnasium,detected,Denial of Service and remote code execution,"Functions in Lodash ( merge, mergeWith, defaultsDeep) can modify the prototype of ""Object"" if given malicious data. This can lead to denial of service or remote code execution.",,unknown,,,Gemnasium-46774bb9-9ce5-4ffe-9bc8-4e610d24df43,2024-11-22 20:55:10 UTC,"{""file""=>""node_modules/sanitize-html/node_modules/lodash/lodash.js"", ""dependency""=>{""package""=>{""name""=>""lodash""}, ""version""=>""2.4.2""}}",FALSE,,,,
